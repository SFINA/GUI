/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package core;

import actions.editMenu.CreateNetworkMenuItemAction;
import actions.editMenu.EditBackendParametersMenuItemAction;
import actions.editMenu.EditEventsMenuItemAction;
import actions.editMenu.EditNetworkMenuItemAction;
import actions.editMenu.EditSfinaParametersMenuItemAction;
import actions.fileMenu.ExitMenuItemAction;
import actions.helpMenu.AboutMenuItemAction;
import actions.helpMenu.HelpMenuItemAction;
import actions.runMenu.CancelMenuItemAction;
import actions.runMenu.ConfigurationsMenuItemAction;
import actions.runMenu.RunMenuItemAction;
import actions.windowMenu.ShowAnalyticsMenuItemAction;
import actions.windowMenu.ShowExperimentExplorerMenuItemAction;
import actions.windowMenu.ShowLogMenuItemAction;
import internalFrames.Analytics;
import internalFrames.Debug;
import internalFrames.ExperimentExplorer;
import internalFrames.NetworkEditor;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.beans.PropertyVetoException;
import java.util.HashMap;
import javax.swing.JInternalFrame;
import javax.swing.JProgressBar;
import protopeer.SimulatedExperiment;

/**
 *
 * @author dinesh
 */
public class PowerFlowCascadeGUI3 extends javax.swing.JFrame {
    public SimulatedExperiment exp;
    public String expSeqNum = "01";
    /**
     * Creates new form PowerFlowCascadeGUI2
     */
    
    
    public PowerFlowCascadeGUI3() {
        setTitle(this.getClass().getSimpleName());
        initComponents();
    }
    
    public SimulatedExperiment getExperiment(){
        return exp;
    }
    
    public String getExpSeqNum(){
        return expSeqNum;
    }
    
    public void setExpSeqNum(String seqNum){
        System.out.println("ExpSeqNum set in GUI3");
         expSeqNum = seqNum;
         configurations.put("expSeqNum",seqNum);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        
        //this.setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        desktop1 = new javax.swing.JDesktopPane();
        desktop2 = new javax.swing.JDesktopPane();
        desktop3 = new javax.swing.JDesktopPane();
        statusPane = new javax.swing.JDesktopPane();
        
        desktop = new javax.swing.JDesktopPane();
        setPreferredSize(new Dimension(1200,800));
        desktop.setPreferredSize(new Dimension(1200,800));
        menuBar = new javax.swing.JMenuBar();
        
        fileMenu = new javax.swing.JMenu("File");
        preferencesMenuItem = new javax.swing.JMenuItem("Preferences");
        exitMenuItem = new javax.swing.JMenuItem("Exit");
        editMenu = new javax.swing.JMenu("Edit");
        createNetworkMenuItem = new javax.swing.JMenuItem("Create Network");
        editNetworkMenuItem = new javax.swing.JMenuItem("Edit Network");
        editEventsMenuItem = new javax.swing.JMenuItem("Add Events");
        editSfinaParametersMenuItem = new javax.swing.JMenuItem("Edit Sfina Parameters");
        editBackendParametersMenuItem = new javax.swing.JMenuItem("Edit Backend Parameters");
        experimentMenu = new javax.swing.JMenu("Experiment");
        runMenuItem = new javax.swing.JMenuItem("Run");
        cancelMenuItem = new javax.swing.JMenuItem("Stop");
        configurationsMenuItem = new javax.swing.JMenuItem("Configurations");
        windowMenu = new javax.swing.JMenu("Window");
        showAnalyticsMenuItem = new javax.swing.JMenuItem("Analytics");
        showLogMenuItem = new javax.swing.JMenuItem("Log");
        showExperimentExplorerMenuItem = new javax.swing.JMenuItem("Experiment Explorer");
        showNetworkMenuItem = new javax.swing.JMenuItem("Network");
        helpMenu = new javax.swing.JMenu("Help");
        helpMenuItem = new javax.swing.JMenuItem("Help");
        aboutMenuItem = new javax.swing.JMenuItem("About");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        
        // Add Action Listeners
        // File Menu
        exitMenuItem.addActionListener(new ExitMenuItemAction(this));
        
        // Edit Menu
        createNetworkMenuItem.addActionListener(new CreateNetworkMenuItemAction(this));
        editNetworkMenuItem.addActionListener(new EditNetworkMenuItemAction(this));
        editBackendParametersMenuItem.addActionListener(new EditBackendParametersMenuItemAction(this));
        editEventsMenuItem.addActionListener(new EditEventsMenuItemAction(this));
        editSfinaParametersMenuItem.addActionListener(new EditSfinaParametersMenuItemAction(this));

       // Experiment Menu Items
        runMenuItem.addActionListener(new RunMenuItemAction(this));
        cancelMenuItem.addActionListener(new CancelMenuItemAction(this));
        configurationsMenuItem.addActionListener(new ConfigurationsMenuItemAction(this));

       // Window Menu Items
        showExperimentExplorerMenuItem.addActionListener(new ShowExperimentExplorerMenuItemAction(this));
        showAnalyticsMenuItem.addActionListener(new ShowAnalyticsMenuItemAction(this));
        showLogMenuItem.addActionListener(new ShowLogMenuItemAction(this));

       // About Menu Items
        helpMenuItem.addActionListener(new HelpMenuItemAction(this));
        aboutMenuItem.addActionListener(new AboutMenuItemAction(this));

        fileMenu.add(preferencesMenuItem);
        fileMenu.add(exitMenuItem);
        menuBar.add(fileMenu);

        editMenu.add(createNetworkMenuItem);
        editMenu.add(editNetworkMenuItem);
        editMenu.add(editEventsMenuItem);
        editMenu.add(editSfinaParametersMenuItem);
        editMenu.add(editBackendParametersMenuItem);
        menuBar.add(editMenu);

        experimentMenu.add(runMenuItem);
        experimentMenu.add(cancelMenuItem);
        experimentMenu.add(configurationsMenuItem);
        menuBar.add(experimentMenu);

        windowMenu.add(showAnalyticsMenuItem);
        windowMenu.add(showLogMenuItem);
        windowMenu.add(showExperimentExplorerMenuItem);
        windowMenu.add(showNetworkMenuItem);
        menuBar.add(windowMenu);

        helpMenu.add(helpMenuItem);
        helpMenu.add(aboutMenuItem);
        menuBar.add(helpMenu);
        
        setJMenuBar(menuBar);
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktop1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(desktop3, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
                    .addComponent(desktop)))
            .addComponent(statusPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(desktop, javax.swing.GroupLayout.PREFERRED_SIZE, 500, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(desktop3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(desktop1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusPane, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        
        /*
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktop1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(desktop, javax.swing.GroupLayout.PREFERRED_SIZE, 600, Short.MAX_VALUE))
                    .addComponent(desktop3)))
                .addComponent(statusPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(desktop1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(desktop, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(desktop3, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(statusPane, javax.swing.GroupLayout.PREFERRED_SIZE, 30, Short.MAX_VALUE))
        );
        */
        
        //getContentPane().setLayout(new BorderLayout(this.getContentPane()));
        label = new StatusBar();
        //statusPane.add(label);
        //desktop3.setLayout(new BorderLayout());
        //desktop3.add(label,BorderLayout.SOUTH);
        /*
        getContentPane().add(desktop, BorderLayout.CENTER);
        getContentPane().add(label, BorderLayout.SOUTH);
        */
        
        statusPane.setLayout(new BorderLayout());
        statusPane.add(label, BorderLayout.CENTER);
        
        pack();
        //setResizable(false);
        initInternalFrames();
        sbw=new StatusBarSwingWorker(label);
    
        
        
    }
    
    public StatusBarSwingWorker getStatusBarSwingWorker(){
        return sbw;
    }
    
    public void initDebugFrame(){
        // Debug Frame
        debug= new Debug(this);
        //this.getDesktop().add(debug);
        desktop3.add(debug,BorderLayout.CENTER);
        debugFrameVisible = true;
        debug.setVisible(debugFrameVisible);
        try {
            debug.setMaximum(true);
        } catch (PropertyVetoException e) {
            // DO SOMETHING
        }
    } 
    
    
    public void initAnalyticsFrame(){
        
        analytics= new Analytics(this);
        //this.getDesktop().add(analytics);
        desktop2.add(analytics);
        analyticsFrameVisible = true;
        analytics.setVisible(analyticsFrameVisible);
        //networkEditor.setPreferredSize(new Dimension(Integer.MAX_VALUE, 250));
        
        
        try {
            analytics.setMaximum(true);
        } catch (PropertyVetoException e) {
            // DO SOMETHING
        }
        
        
    }
    
    public void initExperimentExplorer(){
        
        experimentExplorer= new ExperimentExplorer(this);
        //this.getDesktop().add(experimentExplorer);
        desktop1.add(experimentExplorer);
        experimentExplorerFrameVisible = true;
        experimentExplorer.setVisible(experimentExplorerFrameVisible);
        try {
            experimentExplorer.setMaximum(true);
        } catch (PropertyVetoException e) {
            // DO SOMETHING
        }
    }
    
    public void initNetworkEditor(){
        
        networkEditor= new NetworkEditor(this);
        //this.getDesktop().add(networkEditor);
        desktop2.add(networkEditor);
        networkEditorFrameVisible = true;
        networkEditor.setVisible(networkEditorFrameVisible);
        //networkEditor.setPreferredSize(new Dimension(Integer.MAX_VALUE, 250));
        /*
        try {
            networkEditor.setMaximum(true);
        } catch (PropertyVetoException e) {
            // DO SOMETHING
        }
        */
    }
    
    private void initInternalFrames(){
        
        initDebugFrame();
        
        initAnalyticsFrame();
        
        initExperimentExplorer();
        
        initNetworkEditor();
        
    };
    
    
    public void setDebugFrameVisible(Boolean bool){
        debug.setVisible(bool);
    }
    
    
    
    public void setExperimentExplorerFrameVisible(Boolean bool){
        experimentExplorer.setVisible(bool);
    }

    
    public void setNetworkEditorVisible(Boolean bool){
        networkEditor.setVisible(bool);
    }

    
    public void setAnalyticFrameVisible(Boolean bool){
        
        analytics.setVisible(bool);
    }

    
    public JInternalFrame getDebugFrame(){
        return debug;
    }
    
    
    public JInternalFrame getExperimentExplorer(){
        return experimentExplorer;
    }

    
    public JInternalFrame getNetworkEditor(){
        return networkEditor;
    }

    
    public JInternalFrame getAnalyticFrame(){
        return analytics;
    }

    
    public javax.swing.JDesktopPane getDesktop(){
        return desktop;
    }

    public void notifyStatus(Boolean bool){ // true means running and false means not running
        experimentRunning = bool;
        label.setStatusRunning(bool);
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PowerFlowCascadeGUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PowerFlowCascadeGUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PowerFlowCascadeGUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PowerFlowCascadeGUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PowerFlowCascadeGUI3().setVisible(true);
            }
        });
    }

    public void setProgress(Integer i){
        if(sbw==null||!sbw.isCancelled())
        sbw.cancel(true);
        label.setValue(i);
    }
    
    public HashMap<String, String> getExperimentConfigurations(){
        return configurations;
    }
    
    public void setExperimentConfigurations(HashMap<String, String> map) {
        this.configurations = map;
    }
    
    // variables                 
    private HashMap<String, String> configurations = new HashMap<String, String>();
    
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem configurationsMenuItem;
    private javax.swing.JMenuItem createNetworkMenuItem;
    private javax.swing.JMenuItem editBackendParametersMenuItem;
    private javax.swing.JMenuItem editEventsMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem editNetworkMenuItem;
    private javax.swing.JMenuItem editSfinaParametersMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu experimentMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem preferencesMenuItem;
    private javax.swing.JMenuItem runMenuItem;
    private javax.swing.JMenuItem showAnalyticsMenuItem;
    private javax.swing.JMenuItem showExperimentExplorerMenuItem;
    private javax.swing.JMenuItem showLogMenuItem;
    private javax.swing.JMenuItem showNetworkMenuItem;
    private javax.swing.JMenuItem cancelMenuItem;
    private javax.swing.JMenu windowMenu;
    
    private javax.swing.JInternalFrame analytics;
    private javax.swing.JInternalFrame debug;
    private javax.swing.JInternalFrame experimentExplorer;
    private javax.swing.JInternalFrame networkEditor;
            
    private Boolean  analyticsFrameVisible;
    private Boolean debugFrameVisible;
    private Boolean experimentExplorerFrameVisible;
    private Boolean networkEditorFrameVisible;
    
    private Boolean experimentRunning;
    
    private StatusBar label;
    
    private StatusBarSwingWorker sbw;
        private javax.swing.JDesktopPane desktop1;
    private javax.swing.JDesktopPane desktop2;
    private javax.swing.JDesktopPane desktop3;
    private javax.swing.JDesktopPane statusPane;
    
    
    
}
